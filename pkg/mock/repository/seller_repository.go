// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/seller_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/seller_repository.go -destination=pkg/mock/repository/seller_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/Dongy-s-Advanture/back-end/internal/dto"
	model "github.com/Dongy-s-Advanture/back-end/internal/model"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockISellerRepository is a mock of ISellerRepository interface.
type MockISellerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISellerRepositoryMockRecorder
	isgomock struct{}
}

// MockISellerRepositoryMockRecorder is the mock recorder for MockISellerRepository.
type MockISellerRepositoryMockRecorder struct {
	mock *MockISellerRepository
}

// NewMockISellerRepository creates a new mock instance.
func NewMockISellerRepository(ctrl *gomock.Controller) *MockISellerRepository {
	mock := &MockISellerRepository{ctrl: ctrl}
	mock.recorder = &MockISellerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISellerRepository) EXPECT() *MockISellerRepositoryMockRecorder {
	return m.recorder
}

// CreateSellerData mocks base method.
func (m *MockISellerRepository) CreateSellerData(seller *model.Seller) (*dto.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSellerData", seller)
	ret0, _ := ret[0].(*dto.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSellerData indicates an expected call of CreateSellerData.
func (mr *MockISellerRepositoryMockRecorder) CreateSellerData(seller any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSellerData", reflect.TypeOf((*MockISellerRepository)(nil).CreateSellerData), seller)
}

// DepositSellerBalance mocks base method.
func (m *MockISellerRepository) DepositSellerBalance(sellerID, orderID primitive.ObjectID, payment string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositSellerBalance", sellerID, orderID, payment, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositSellerBalance indicates an expected call of DepositSellerBalance.
func (mr *MockISellerRepositoryMockRecorder) DepositSellerBalance(sellerID, orderID, payment, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositSellerBalance", reflect.TypeOf((*MockISellerRepository)(nil).DepositSellerBalance), sellerID, orderID, payment, amount)
}

// GetSellerBalanceByID mocks base method.
func (m *MockISellerRepository) GetSellerBalanceByID(sellerID primitive.ObjectID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerBalanceByID", sellerID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerBalanceByID indicates an expected call of GetSellerBalanceByID.
func (mr *MockISellerRepositoryMockRecorder) GetSellerBalanceByID(sellerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerBalanceByID", reflect.TypeOf((*MockISellerRepository)(nil).GetSellerBalanceByID), sellerID)
}

// GetSellerByID mocks base method.
func (m *MockISellerRepository) GetSellerByID(sellerID primitive.ObjectID) (*dto.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerByID", sellerID)
	ret0, _ := ret[0].(*dto.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerByID indicates an expected call of GetSellerByID.
func (mr *MockISellerRepositoryMockRecorder) GetSellerByID(sellerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerByID", reflect.TypeOf((*MockISellerRepository)(nil).GetSellerByID), sellerID)
}

// GetSellerByUsername mocks base method.
func (m *MockISellerRepository) GetSellerByUsername(req *dto.LoginRequest) (*model.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerByUsername", req)
	ret0, _ := ret[0].(*model.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerByUsername indicates an expected call of GetSellerByUsername.
func (mr *MockISellerRepositoryMockRecorder) GetSellerByUsername(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerByUsername", reflect.TypeOf((*MockISellerRepository)(nil).GetSellerByUsername), req)
}

// GetSellers mocks base method.
func (m *MockISellerRepository) GetSellers() ([]dto.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellers")
	ret0, _ := ret[0].([]dto.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellers indicates an expected call of GetSellers.
func (mr *MockISellerRepositoryMockRecorder) GetSellers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellers", reflect.TypeOf((*MockISellerRepository)(nil).GetSellers))
}

// UpdateSeller mocks base method.
func (m *MockISellerRepository) UpdateSeller(sellerID primitive.ObjectID, updatedSeller *model.Seller) (*dto.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeller", sellerID, updatedSeller)
	ret0, _ := ret[0].(*dto.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSeller indicates an expected call of UpdateSeller.
func (mr *MockISellerRepositoryMockRecorder) UpdateSeller(sellerID, updatedSeller any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeller", reflect.TypeOf((*MockISellerRepository)(nil).UpdateSeller), sellerID, updatedSeller)
}

// UpdateSellerScore mocks base method.
func (m *MockISellerRepository) UpdateSellerScore(sellerID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSellerScore", sellerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSellerScore indicates an expected call of UpdateSellerScore.
func (mr *MockISellerRepositoryMockRecorder) UpdateSellerScore(sellerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSellerScore", reflect.TypeOf((*MockISellerRepository)(nil).UpdateSellerScore), sellerID)
}

// WithdrawSellerBalance mocks base method.
func (m *MockISellerRepository) WithdrawSellerBalance(sellerID primitive.ObjectID, payment string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawSellerBalance", sellerID, payment, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawSellerBalance indicates an expected call of WithdrawSellerBalance.
func (mr *MockISellerRepositoryMockRecorder) WithdrawSellerBalance(sellerID, payment, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawSellerBalance", reflect.TypeOf((*MockISellerRepository)(nil).WithdrawSellerBalance), sellerID, payment, amount)
}
