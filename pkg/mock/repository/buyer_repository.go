// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/buyer_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/buyer_repository.go -destination=pkg/mock/repository/buyer_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/Dongy-s-Advanture/back-end/internal/dto"
	model "github.com/Dongy-s-Advanture/back-end/internal/model"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockIBuyerRepository is a mock of IBuyerRepository interface.
type MockIBuyerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBuyerRepositoryMockRecorder
	isgomock struct{}
}

// MockIBuyerRepositoryMockRecorder is the mock recorder for MockIBuyerRepository.
type MockIBuyerRepositoryMockRecorder struct {
	mock *MockIBuyerRepository
}

// NewMockIBuyerRepository creates a new mock instance.
func NewMockIBuyerRepository(ctrl *gomock.Controller) *MockIBuyerRepository {
	mock := &MockIBuyerRepository{ctrl: ctrl}
	mock.recorder = &MockIBuyerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBuyerRepository) EXPECT() *MockIBuyerRepositoryMockRecorder {
	return m.recorder
}

// CreateBuyerData mocks base method.
func (m *MockIBuyerRepository) CreateBuyerData(buyer *model.Buyer) (*dto.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuyerData", buyer)
	ret0, _ := ret[0].(*dto.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuyerData indicates an expected call of CreateBuyerData.
func (mr *MockIBuyerRepositoryMockRecorder) CreateBuyerData(buyer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuyerData", reflect.TypeOf((*MockIBuyerRepository)(nil).CreateBuyerData), buyer)
}

// DeleteProductFromCart mocks base method.
func (m *MockIBuyerRepository) DeleteProductFromCart(buyerID, productID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductFromCart", buyerID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductFromCart indicates an expected call of DeleteProductFromCart.
func (mr *MockIBuyerRepositoryMockRecorder) DeleteProductFromCart(buyerID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductFromCart", reflect.TypeOf((*MockIBuyerRepository)(nil).DeleteProductFromCart), buyerID, productID)
}

// GetBuyer mocks base method.
func (m *MockIBuyerRepository) GetBuyer() ([]dto.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyer")
	ret0, _ := ret[0].([]dto.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyer indicates an expected call of GetBuyer.
func (mr *MockIBuyerRepositoryMockRecorder) GetBuyer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyer", reflect.TypeOf((*MockIBuyerRepository)(nil).GetBuyer))
}

// GetBuyerByID mocks base method.
func (m *MockIBuyerRepository) GetBuyerByID(buyerID primitive.ObjectID) (*dto.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyerByID", buyerID)
	ret0, _ := ret[0].(*dto.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyerByID indicates an expected call of GetBuyerByID.
func (mr *MockIBuyerRepositoryMockRecorder) GetBuyerByID(buyerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyerByID", reflect.TypeOf((*MockIBuyerRepository)(nil).GetBuyerByID), buyerID)
}

// GetBuyerByUsername mocks base method.
func (m *MockIBuyerRepository) GetBuyerByUsername(req *dto.LoginRequest) (*model.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuyerByUsername", req)
	ret0, _ := ret[0].(*model.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuyerByUsername indicates an expected call of GetBuyerByUsername.
func (mr *MockIBuyerRepositoryMockRecorder) GetBuyerByUsername(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuyerByUsername", reflect.TypeOf((*MockIBuyerRepository)(nil).GetBuyerByUsername), req)
}

// UpdateBuyerData mocks base method.
func (m *MockIBuyerRepository) UpdateBuyerData(buyerID primitive.ObjectID, updatedBuyer *model.Buyer) (*dto.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuyerData", buyerID, updatedBuyer)
	ret0, _ := ret[0].(*dto.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuyerData indicates an expected call of UpdateBuyerData.
func (mr *MockIBuyerRepositoryMockRecorder) UpdateBuyerData(buyerID, updatedBuyer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuyerData", reflect.TypeOf((*MockIBuyerRepository)(nil).UpdateBuyerData), buyerID, updatedBuyer)
}

// UpdateProductInCart mocks base method.
func (m *MockIBuyerRepository) UpdateProductInCart(buyerID primitive.ObjectID, product *model.OrderProduct) ([]dto.OrderProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductInCart", buyerID, product)
	ret0, _ := ret[0].([]dto.OrderProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductInCart indicates an expected call of UpdateProductInCart.
func (mr *MockIBuyerRepositoryMockRecorder) UpdateProductInCart(buyerID, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductInCart", reflect.TypeOf((*MockIBuyerRepository)(nil).UpdateProductInCart), buyerID, product)
}
