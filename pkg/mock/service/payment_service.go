// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/payment_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/Dongy-s-Advanture/back-end/internal/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIPaymentService is a mock of IPaymentService interface.
type MockIPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentServiceMockRecorder
}

// MockIPaymentServiceMockRecorder is the mock recorder for MockIPaymentService.
type MockIPaymentServiceMockRecorder struct {
	mock *MockIPaymentService
}

// NewMockIPaymentService creates a new mock instance.
func NewMockIPaymentService(ctrl *gomock.Controller) *MockIPaymentService {
	mock := &MockIPaymentService{ctrl: ctrl}
	mock.recorder = &MockIPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentService) EXPECT() *MockIPaymentServiceMockRecorder {
	return m.recorder
}

// HandlePayment mocks base method.
func (m *MockIPaymentService) HandlePayment(paymentRequest *dto.BuyerPaymentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePayment", paymentRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePayment indicates an expected call of HandlePayment.
func (mr *MockIPaymentServiceMockRecorder) HandlePayment(paymentRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePayment", reflect.TypeOf((*MockIPaymentService)(nil).HandlePayment), paymentRequest)
}
