// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/auth_service.go -destination=pkg/mock/service/auth_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	dto "github.com/Dongy-s-Advanture/back-end/internal/dto"
	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
	isgomock struct{}
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// BuyerLogin mocks base method.
func (m *MockIAuthService) BuyerLogin(req *dto.LoginRequest) (*dto.Buyer, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyerLogin", req)
	ret0, _ := ret[0].(*dto.Buyer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BuyerLogin indicates an expected call of BuyerLogin.
func (mr *MockIAuthServiceMockRecorder) BuyerLogin(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyerLogin", reflect.TypeOf((*MockIAuthService)(nil).BuyerLogin), req)
}

// InvalidateToken mocks base method.
func (m *MockIAuthService) InvalidateToken(token string, expirationTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", token, expirationTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockIAuthServiceMockRecorder) InvalidateToken(token, expirationTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockIAuthService)(nil).InvalidateToken), token, expirationTime)
}

// Logout mocks base method.
func (m *MockIAuthService) Logout(accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIAuthServiceMockRecorder) Logout(accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAuthService)(nil).Logout), accessToken, refreshToken)
}

// RefreshToken mocks base method.
func (m *MockIAuthService) RefreshToken(c *gin.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIAuthServiceMockRecorder) RefreshToken(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIAuthService)(nil).RefreshToken), c)
}

// SellerLogin mocks base method.
func (m *MockIAuthService) SellerLogin(req *dto.LoginRequest) (*dto.Seller, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SellerLogin", req)
	ret0, _ := ret[0].(*dto.Seller)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SellerLogin indicates an expected call of SellerLogin.
func (mr *MockIAuthServiceMockRecorder) SellerLogin(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SellerLogin", reflect.TypeOf((*MockIAuthService)(nil).SellerLogin), req)
}
