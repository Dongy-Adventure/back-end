// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/product_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/Dongy-s-Advanture/back-end/internal/dto"
	model "github.com/Dongy-s-Advanture/back-end/internal/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockIProductService is a mock of IProductService interface.
type MockIProductService struct {
	ctrl     *gomock.Controller
	recorder *MockIProductServiceMockRecorder
}

// MockIProductServiceMockRecorder is the mock recorder for MockIProductService.
type MockIProductServiceMockRecorder struct {
	mock *MockIProductService
}

// NewMockIProductService creates a new mock instance.
func NewMockIProductService(ctrl *gomock.Controller) *MockIProductService {
	mock := &MockIProductService{ctrl: ctrl}
	mock.recorder = &MockIProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductService) EXPECT() *MockIProductServiceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockIProductService) CreateProduct(product *model.Product) (*dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(*dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockIProductServiceMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIProductService)(nil).CreateProduct), product)
}

// DeleteProduct mocks base method.
func (m *MockIProductService) DeleteProduct(productID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductServiceMockRecorder) DeleteProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductService)(nil).DeleteProduct), productID)
}

// GetProductByID mocks base method.
func (m *MockIProductService) GetProductByID(productID primitive.ObjectID) (*dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", productID)
	ret0, _ := ret[0].(*dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockIProductServiceMockRecorder) GetProductByID(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockIProductService)(nil).GetProductByID), productID)
}

// GetProducts mocks base method.
func (m *MockIProductService) GetProducts() ([]dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductServiceMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductService)(nil).GetProducts))
}

// GetProductsBySellerID mocks base method.
func (m *MockIProductService) GetProductsBySellerID(sellerID primitive.ObjectID) ([]dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsBySellerID", sellerID)
	ret0, _ := ret[0].([]dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsBySellerID indicates an expected call of GetProductsBySellerID.
func (mr *MockIProductServiceMockRecorder) GetProductsBySellerID(sellerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsBySellerID", reflect.TypeOf((*MockIProductService)(nil).GetProductsBySellerID), sellerID)
}

// UpdateProduct mocks base method.
func (m *MockIProductService) UpdateProduct(productID primitive.ObjectID, updatedProduct *model.Product) (*dto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", productID, updatedProduct)
	ret0, _ := ret[0].(*dto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductServiceMockRecorder) UpdateProduct(productID, updatedProduct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductService)(nil).UpdateProduct), productID, updatedProduct)
}
