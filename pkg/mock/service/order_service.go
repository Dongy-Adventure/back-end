// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/Dongy-s-Advanture/back-end/internal/dto"
	userrole "github.com/Dongy-s-Advanture/back-end/internal/enum/userrole"
	model "github.com/Dongy-s-Advanture/back-end/internal/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockIOrderService is a mock of IOrderService interface.
type MockIOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderServiceMockRecorder
}

// MockIOrderServiceMockRecorder is the mock recorder for MockIOrderService.
type MockIOrderServiceMockRecorder struct {
	mock *MockIOrderService
}

// NewMockIOrderService creates a new mock instance.
func NewMockIOrderService(ctrl *gomock.Controller) *MockIOrderService {
	mock := &MockIOrderService{ctrl: ctrl}
	mock.recorder = &MockIOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderService) EXPECT() *MockIOrderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockIOrderService) CreateOrder(products []dto.OrderProduct, buyerID, sellerID primitive.ObjectID, sellerName string, buyerName string, payment string) (*dto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", products, buyerID, sellerID, sellerName, buyerName, payment)
	ret0, _ := ret[0].(*dto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockIOrderServiceMockRecorder) CreateOrder(products, buyerID, sellerID interface{}, sellerName string, buyerName string, payment string) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockIOrderService)(nil).CreateOrder), products, buyerID, sellerID, sellerName, buyerName, payment)
}

// DeleteOrderByOrderID mocks base method.
func (m *MockIOrderService) DeleteOrderByOrderID(orderID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByOrderID", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByOrderID indicates an expected call of DeleteOrderByOrderID.
func (mr *MockIOrderServiceMockRecorder) DeleteOrderByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByOrderID", reflect.TypeOf((*MockIOrderService)(nil).DeleteOrderByOrderID), orderID)
}

// GetOrdersByUserID mocks base method.
func (m *MockIOrderService) GetOrdersByUserID(userID primitive.ObjectID, userType userrole.UserType) ([]dto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", userID, userType)
	ret0, _ := ret[0].([]dto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockIOrderServiceMockRecorder) GetOrdersByUserID(userID, userType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockIOrderService)(nil).GetOrdersByUserID), userID, userType)
}

// GetTotalPrice mocks base method.
func (m *MockIOrderService) GetTotalPrice(products []dto.OrderProduct) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPrice", products)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTotalPrice indicates an expected call of GetTotalPrice.
func (mr *MockIOrderServiceMockRecorder) GetTotalPrice(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPrice", reflect.TypeOf((*MockIOrderService)(nil).GetTotalPrice), products)
}

// UpdateOrder mocks base method.
func (m *MockIOrderService) UpdateOrder(orderID primitive.ObjectID, updatedOrder *model.Order) (*dto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", orderID, updatedOrder)
	ret0, _ := ret[0].(*dto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockIOrderServiceMockRecorder) UpdateOrder(orderID, updatedOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockIOrderService)(nil).UpdateOrder), orderID, updatedOrder)
}

// UpdateOrderStatus mocks base method.
func (m *MockIOrderService) UpdateOrderStatus(orderID primitive.ObjectID, orderStatus int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", orderID, orderStatus)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockIOrderServiceMockRecorder) UpdateOrderStatus(orderID, orderStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockIOrderService)(nil).UpdateOrderStatus), orderID, orderStatus)
}
